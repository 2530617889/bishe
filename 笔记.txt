SQL中的select是根据列的名称来选取；
Pandas则更为灵活，不但可根据列名称选取，还可以根据列所在的position（数字，在第几行第几列，注意pandas行列的position是从0开始）选取。
相关函数如下：
    1）loc，基于列label，可选取特定行（根据行index）；
    2）iloc，基于行/列的position；
    3）at，根据指定行index及列label，快速定位DataFrame的元素；
    4）iat，与at类似，不同的是根据position来定位的；
    5）ix，为loc与iloc的混合体，既支持label也支持position；

筛选java从业职位
d=[d for d in df.工作名称 if 'JAVA' in d or 'Java' in d or 'java' in d ]

正则表达式:
\d      可以匹配一个数字
\w      可以匹配一个字母或数字
*       表示任意个字符（包括0个）
+       表示至少一个字符
?       表示0个或1个字符
{n}     表示n个字符
{n,m}   表示n-m个字符
^       表示行的开头
$       表示行的结束

Re模块中预编译compile函数的使用：
    re.S: 使 . 匹配包括换行在内的所有字符
    re.I: 使匹配对大小写不敏感
    re.L: 做本地化识别（locale-aware）匹配
    re.M: 多行匹配，影响 ^ 和 $
    re.X: 能够使用 REs 的 verbose 状态，使之被组织得更清晰易懂




为高校人才培养的目标提供导向

需要分析的数据：
    工作名称、工作地点、经验、

图一：开发语言总榜
图二：地区总榜

图三：某种语言的地区排行 柱图
图四：某个地区的语言榜 柱图
图五：地区语言榜的饼图 饼图






self.jobs = ('Java', 'C/C++', 'Python', 'C#', '区块链',
                     'Linux', '大数据', 'Web', '数据库', 'HTML5', '.NET')
                     'PHP', 'IOS', 'Android', 'CSS', 'FPGA', '算法'



jobs = ('Java', 'C/C++', 'Python', 'C#', '区块链', 'Linux', '大数据', 'Web', '数据库', 'HTML5', '.NET', 'PHP', 'IOS', 'Android', 'CSS', 'FPGA', '算法')


所有城市
city=tuple(set(self.df.工作地点))


每座城市的所有招聘信息
 self.df[self.df.工作地点 == '北京']

df.ix['IOS']    # 按行获取
df.ix[[2,4]]    # 获取第2、4行数据

